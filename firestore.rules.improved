rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate basic user data
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'displayName', 'createdAt', 'updatedAt']) &&
             data.email is string &&
             data.displayName is string &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    // Users collection - simplified rules
    match /users/{userId} {
      // READ: Any authenticated user can read user profiles
      allow read: if isAuthenticated();

      // CREATE: Users can create their own profile
      allow create: if isOwner(userId) &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.email == request.auth.token.email;

      // UPDATE: Users can update their own profile
      allow update: if isOwner(userId) &&
                       isValidUserData(request.resource.data) &&
                       // Prevent changing email and createdAt
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.createdAt == resource.data.createdAt;

      // DELETE: Users can delete their own profile
      allow delete: if isOwner(userId);

      // Sub-collections (saved_places, etc.)
      match /{subCollection}/{docId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // Friend requests collection - simplified
    match /friend_requests/{requestId} {
      // READ: Users can read requests they sent or received
      allow read: if isAuthenticated() &&
                     (resource.data.from == request.auth.uid || 
                      resource.data.to == request.auth.uid);

      // CREATE: Users can create friend requests
      allow create: if isAuthenticated() &&
                       request.resource.data.from == request.auth.uid &&
                       request.resource.data.to != request.auth.uid &&
                       request.resource.data.status == 'FriendshipStatus.pending';

      // UPDATE: Recipients can accept/reject requests
      allow update: if isAuthenticated() &&
                       resource.data.to == request.auth.uid &&
                       resource.data.status == 'FriendshipStatus.pending';

      // DELETE: Senders can cancel their pending requests
      allow delete: if isAuthenticated() &&
                       resource.data.from == request.auth.uid;
    }

    // Locations collection - for real-time location sharing
    match /locations/{userId} {
      // READ: Friends can read each other's locations
      allow read: if isAuthenticated();
      
      // WRITE: Users can update their own location
      allow write: if isOwner(userId);
      
      // DELETE: Users can delete their own location
      allow delete: if isOwner(userId);
    }

    // Default deny for all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}